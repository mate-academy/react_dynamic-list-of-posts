{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/comments.ts","components/PostDetails.tsx","components/UsersContext.tsx","api/users.ts","components/UserSelector.tsx","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","onPostSelected","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","onSubmit","useState","submitting","setSubmitting","name","setName","email","setEmail","body","setBody","isValid","Boolean","handleSubmit","event","a","preventDefault","onReset","htmlFor","placeholder","value","onChange","target","disabled","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","deleteComment","commentId","PostDetails","comments","setComments","loaded","setLoaded","hasError","setError","visible","setVisible","useEffect","postId","catch","finally","addComment","newComment","currentComments","filter","comment","commentsApi","length","href","UserContext","React","createContext","UsersProvider","children","users","setUsers","Provider","UserSelector","selectedUser","useContext","expanded","setExpanded","handleDocumentClick","document","addEventListener","removeEventListener","current","role","user","App","setPosts","author","setAuthor","selectedPost","setSelectedPost","loadUserPosts","userId","getUserPosts","ReactDOM","render","getElementById"],"mappings":"wRAUaA,EAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,MADwC,IAExCC,sBAFwC,MAEvB,EAFuB,EAGxCC,EAHwC,EAGxCA,eAHwC,OAKxC,sBAAKC,UAAU,YAAf,UACE,mBAAGA,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,+BACE,6BAAKA,EAAKC,KACV,6BAAKD,EAAKE,QACV,oBAAIJ,UAAU,8BAAd,SACE,wBACEK,KAAK,SACLL,UAAWM,IACT,SACA,UACA,CACE,WAAYJ,EAAKC,KAAOL,IAG5BS,QAAS,WACPR,EAAeG,EAAKC,KAAOL,EAAiB,KAAOI,IAVvD,SAaGA,EAAKC,KAAOL,EAAiB,QAAU,aAjBrCI,EAAKC,gB,+BC3BXK,G,MAAS,kBACpB,qBAAKR,UAAU,SAAf,SACE,qBAAKA,UAAU,wBCINS,EAAkC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChD,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KAEMC,EAAUC,QAAQP,GAAQE,GAASE,GAQnCI,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACnBD,EAAME,iBAEDL,EAHc,wDAOnBP,GAAc,GAPK,SAUbH,EAAS,CAAEI,OAAME,QAAOE,SAVX,OAYnBL,GAAc,GAEdM,EAAQ,IAdW,2CAAH,sDAkBlB,OACE,uBAAMT,SAAUY,EAAcI,QAzBd,WAChBX,EAAQ,IACRE,EAAS,IACTE,EAAQ,KAsBR,UACE,sBAAKnB,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ2B,QAAQ,sBAAjC,yBAIA,sBAAK3B,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLF,GAAG,sBACHyB,YAAY,eACZ5B,UAAWM,IAAW,QAAS,CAAE,aAAcQ,IAC/Ce,MAAOf,EACPgB,SAAU,SAAAP,GAAK,OAAIR,EAAQQ,EAAMQ,OAAOF,UAG1C,sBAAM7B,UAAU,wBAAhB,SACE,mBAAGA,UAAU,mBAGbc,GACA,sBAAMd,UAAU,yCAAhB,SACE,mBAAGA,UAAU,sCAKjBc,GACA,mBAAGd,UAAU,iBAAb,iCAIJ,sBAAKA,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ2B,QAAQ,uBAAjC,0BAIA,sBAAK3B,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLF,GAAG,uBACHyB,YAAY,iBACZ5B,UAAWM,IAAW,QAAS,CAAE,aAAcU,IAC/Ca,MAAOb,EACPc,SAAU,SAAAP,GAAK,OAAIN,EAASM,EAAMQ,OAAOF,UAG3C,sBAAM7B,UAAU,wBAAhB,SACE,mBAAGA,UAAU,uBAGbgB,GACA,sBAAMhB,UAAU,yCAAhB,SACE,mBAAGA,UAAU,sCAKjBgB,GACA,mBAAGhB,UAAU,iBAAb,kCAIJ,sBAAKA,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ2B,QAAQ,eAAjC,0BAIA,qBAAK3B,UAAU,UAAf,SACE,0BACEG,GAAG,eACHyB,YAAY,oBACZ5B,UAAWM,IAAW,WAAY,CAAE,aAAcY,IAClDW,MAAOX,EACPY,SAAU,SAAAP,GAAK,OAAIJ,EAAQI,EAAMQ,OAAOF,aAI1CX,GACA,mBAAGlB,UAAU,iBAAb,gCAIJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWM,IAAW,SAAU,UAAW,CACzC,aAAcM,IAEhBoB,UAAWZ,EALb,mBAWF,qBAAKpB,UAAU,UAAf,SAEE,wBAAQK,KAAK,QAAQL,UAAU,0BAA/B,4BC3IJiC,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQzB,KAAO0B,KAAKC,UAAUH,GAC9BC,EAAQG,QAAU,CAChB,eAAgB,oCAKbZ,EAAK,KACTa,MAAK,kBAAMC,MAAMf,EAAWO,EAAKG,MACjCI,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIX,GAAJ,OAAoBD,EAAWC,IADzBW,EAEL,SAAIX,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDS,EAIH,SAACX,GAAD,OAAiBD,EAAQC,EAAK,WCzB3BY,EAAgB,SAACC,GAC5B,OAAOF,EAAA,oBAA2BE,KCAvBC,EAA+B,SAAC,GAAc,IAAZpD,EAAW,EAAXA,KAC7C,EAAgCS,mBAAoB,IAApD,mBAAO4C,EAAP,KAAiBC,EAAjB,KACA,EAA4B7C,oBAAS,GAArC,mBAAO8C,EAAP,KAAeC,EAAf,KACA,EAA6B/C,oBAAS,GAAtC,mBAAOgD,EAAP,KAAiBC,EAAjB,KACA,EAA8BjD,oBAAS,GAAvC,mBAAOkD,EAAP,KAAgBC,EAAhB,KAaAC,qBAXA,WDf6B,IAACC,ECgB5BN,GAAU,GACVE,GAAS,GACTE,GAAW,IDlBiBE,ECoBA9D,EAAKC,GDnB5BgD,EAAA,2BAA0Ca,KCoB5CjB,KAAKS,GACLS,OAAM,kBAAML,GAAS,MACrBM,SAAQ,kBAAMR,GAAU,QAGL,CAACxD,EAAKC,KA4B9B,IAAMgE,EAAU,uCAAG,mCAAA3C,EAAA,6DAASV,EAAT,EAASA,KAAME,EAAf,EAAeA,MAAOE,EAAtB,EAAsBA,KAAtB,kBDlDSwB,ECoD2B,CACjD5B,OACAE,QACAE,OACA8C,OAAQ9D,EAAKC,IDvDZgD,EAAqB,YAAaT,GCiDtB,OAET0B,EAFS,OASfZ,GACE,SAAAa,GAAe,4BAAQA,GAAR,CAAyBD,OAV3B,gDAmBfR,GAAS,GAnBM,kCDlDQ,IAAClB,ICkDT,oBAAH,sDAuBVU,EAAa,uCAAG,WAAOC,GAAP,SAAA7B,EAAA,6DAGpBgC,GACE,SAAAa,GAAe,OAAIA,EAAgBC,QACjC,SAAAC,GAAO,OAAIA,EAAQpE,KAAOkD,QALV,SASdmB,EAA0BnB,GATZ,2CAAH,sDAYnB,OACE,sBAAKrD,UAAU,UAAf,UACE,sBAAKA,UAAU,QAAf,UACE,wCACOE,EAAKC,GADZ,aACmBD,EAAKE,SAExB,4BAAIF,EAAKgB,UAGX,sBAAKlB,UAAU,QAAf,WACIyD,GAAU,cAAC,EAAD,IAEXA,GAAUE,GACT,qBAAK3D,UAAU,yBAAf,kCAKDyD,IAAWE,GAAgC,IAApBJ,EAASkB,QAC/B,mBAAGzE,UAAU,aAAb,6BAGDyD,IAAWE,GAAYJ,EAASkB,OAAS,GACxC,qCACE,mBAAGzE,UAAU,aAAb,uBAECuD,EAAStD,KAAI,SAAAsE,GAAO,OACnB,0BAASvE,UAAU,mBAAnB,UACE,sBAAKA,UAAU,iBAAf,UACE,mBAAG0E,KAAI,iBAAYH,EAAQvD,OAA3B,SACGuD,EAAQzD,OAGX,wBACET,KAAK,SACLL,UAAU,kBACV,aAAW,SACXO,QAAS,kBAAM6C,EAAcmB,EAAQpE,KAJvC,8BAUF,qBAAKH,UAAU,eAAf,SACGuE,EAAQrD,SAjB8BqD,EAAQpE,UAwBxDsD,IAAWE,IAAaE,GACvB,wBACExD,KAAK,SACLL,UAAU,iBACVO,QAAS,kBAAMuD,GAAW,IAH5B,6BASDL,IAAWE,GAAYE,GACtB,cAAC,EAAD,CAAgBnD,SAAUyD,WCvJvBQ,EAAcC,IAAMC,cAAsB,IAE1CC,EAA0B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxC,EAA0BpE,mBAAiB,IAA3C,mBAAOqE,EAAP,KAAcC,EAAd,KAOA,OALAlB,qBAAU,WCLHZ,EAAmB,UDOrBJ,KAAKkC,KACP,IAGD,cAACN,EAAYO,SAAb,CAAsBrD,MAAOmD,EAA7B,SACGD,KENMI,EAAgC,SAAC,GAKvC,IAFEC,EAEH,EAFJvD,MACAC,EACI,EADJA,SAKMkD,EAAQK,qBAAWV,GACzB,EAAgChE,oBAAS,GAAzC,mBAAO2E,EAAP,KAAiBC,EAAjB,KAuBA,OArBAxB,qBAAU,WACR,GAAKuB,EAAL,CAKA,IAAME,EAAsB,WAG1BD,GAAY,IAKd,OAFAE,SAASC,iBAAiB,QAASF,GAE5B,WACLC,SAASE,oBAAoB,QAASH,OAIvC,CAACF,IAGF,sBAAKtF,UAAWM,IAAW,WAAY,CAAE,YAAagF,IAAtD,UACE,qBAAKtF,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdO,QAAS,WACPgF,GAAY,SAAAK,GAAO,OAAKA,MAN5B,UASE,gCACe,OAAZR,QAAY,IAAZA,OAAA,EAAAA,EAActE,OAAQ,kBAGzB,sBAAMd,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBAAKA,UAAU,gBAAgBG,GAAG,gBAAgB0F,KAAK,OAAvD,SACE,qBAAK7F,UAAU,mBAAf,SACGgF,EAAM/E,KAAI,SAAA6F,GAAI,OACb,mBAEEpB,KAAI,gBAAWoB,EAAK3F,IACpBI,QAAS,WACPuB,EAASgE,IAEX9F,UAAWM,IAAW,gBAAiB,CACrC,YAAawF,EAAK3F,MAAL,OAAYiF,QAAZ,IAAYA,OAAZ,EAAYA,EAAcjF,MAP3C,SAUG2F,EAAKhF,MATDgF,EAAK3F,eCvDX4F,EAAgB,WAC3B,MAA0BpF,mBAAiB,IAA3C,mBAAOd,EAAP,KAAcmG,EAAd,KACA,EAA4BrF,oBAAS,GAArC,mBAAO8C,EAAP,KAAeC,EAAf,KACA,EAA6B/C,oBAAS,GAAtC,mBAAOgD,EAAP,KAAiBC,EAAjB,KAEA,EAA4BjD,mBAAsB,MAAlD,mBAAOsF,EAAP,KAAeC,EAAf,KACA,EAAwCvF,mBAAsB,MAA9D,mBAAOwF,EAAP,KAAqBC,EAArB,KAEA,SAASC,EAAcC,GACrB5C,GAAU,GCpBc,SAAC4C,GAC3B,OAAOnD,EAAA,wBAAoCmD,IDqBzCC,CAAaD,GACVvD,KAAKiD,GACL/B,OAAM,kBAAML,GAAS,MAErBM,SAAQ,kBAAMR,GAAU,MAe7B,OAZAK,qBAAU,WAGRqC,EAAgB,MAEZH,EACFI,EAAcJ,EAAO9F,IAErB6F,EAAS,MAEV,QAACC,QAAD,IAACA,OAAD,EAACA,EAAQ9F,KAGV,sBAAMH,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CAAc6B,MAAOoE,EAAQnE,SAAUoE,MAGzC,sBAAKlG,UAAU,QAAf,WACIiG,GACA,iDAGDA,IAAWxC,GACV,cAAC,EAAD,IAGDwC,GAAUxC,GAAUE,GACnB,qBAAK3D,UAAU,yBAAf,mCAKDiG,GAAUxC,IAAWE,GAA6B,IAAjB9D,EAAM4E,QACtC,qBAAKzE,UAAU,0BAAf,0BAKDiG,GAAUxC,IAAWE,GAAY9D,EAAM4E,OAAS,GAC/C,cAAC,EAAD,CACE5E,MAAOA,EACPC,eAAc,OAAEqG,QAAF,IAAEA,OAAF,EAAEA,EAAchG,GAC9BJ,eAAgBqG,YAO1B,qBACEpG,UAAWM,IACT,OACA,YACA,eACA,UACA,CACE,gBAAiB6F,IAPvB,SAWE,qBAAKnG,UAAU,gCAAf,SACGmG,GACC,cAAC,EAAD,CAAajG,KAAMiG,gBE9FnCK,IAASC,OACP,cAAC,EAAD,UACE,cAAC,EAAD,MAEFhB,SAASiB,eAAe,W","file":"static/js/main.0934e00e.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId?: number,\n  onPostSelected: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId = 0,\n  onPostSelected,\n}) => (\n  <div className=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr key={post.id}>\n            <th>{post.id}</th>\n            <td>{post.title}</td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  {\n                    'is-light': post.id !== selectedPostId,\n                  },\n                )}\n                onClick={() => {\n                  onPostSelected(post.id === selectedPostId ? null : post);\n                }}\n              >\n                {post.id === selectedPostId ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onSubmit: (data: CommentData) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onSubmit }) => {\n  const [submitting, setSubmitting] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const isValid = Boolean(name && email && body);\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!isValid) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    // it is very easy to forget about `await` keyword\n    await onSubmit({ name, email, body });\n    // and the spinner will disappear immediately\n    setSubmitting(false);\n\n    setBody('');\n    // We keep the entered name and email\n  };\n\n  return (\n    <form onSubmit={handleSubmit} onReset={clearForm}>\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': !name })}\n            value={name}\n            onChange={event => setName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!name && (\n            <span className=\"icon is-small is-right has-text-danger\">\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!name && (\n          <p className=\"help is-danger\">Name is required</p>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': !email })}\n            value={email}\n            onChange={event => setEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!email && (\n            <span className=\"icon is-small is-right has-text-danger\">\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!email && (\n          <p className=\"help is-danger\">Email is required</p>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': !body })}\n            value={body}\n            onChange={event => setBody(event.target.value)}\n          />\n        </div>\n\n        {!body && (\n          <p className=\"help is-danger\">Enter some text</p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': submitting,\n            })}\n            disabled={!isValid}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// import { client } from '../utils/axiosClient';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport * as commentsApi from '../api/comments';\n\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [hasError, setError] = useState(false);\n  const [visible, setVisible] = useState(false);\n\n  function loadComments() {\n    setLoaded(false);\n    setError(false);\n    setVisible(false);\n\n    commentsApi.getPostComments(post.id)\n      .then(setComments) // save the loaded comments\n      .catch(() => setError(true)) // show an error when something went wrong\n      .finally(() => setLoaded(true)); // hide the spinner\n  }\n\n  useEffect(loadComments, [post.id]);\n\n  // The same useEffect with async/await\n  /*\n  async function loadComments() {\n    setLoaded(false);\n    setVisible(false);\n    setError(false);\n\n    try {\n      const commentsFromServer = await commentsApi.getPostComments(post.id);\n\n      setComments(commentsFromServer);\n    } catch (error) {\n      setError(true);\n    } finally {\n      setLoaded(true);\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, []);\n\n  useEffect(loadComments, [post.id]); // Wrong!\n  // effect can return only a function but not a Promise\n  */\n\n  const addComment = async ({ name, email, body }: CommentData) => {\n    try {\n      const newComment = await commentsApi.createComment({\n        name,\n        email,\n        body,\n        postId: post.id,\n      });\n\n      setComments(\n        currentComments => [...currentComments, newComment],\n      );\n\n      // setComments([...comments, newComment]);\n      // works wrong if we wrap `addComment` with `useCallback`\n      // because it takes the `comments` cached during the first render\n      // not the actual ones\n    } catch (error) {\n      // we show an error message in case of any error\n      setError(true);\n    }\n  };\n\n  const deleteComment = async (commentId: number) => {\n    // we delete the comment immediately so as\n    // not to make the user wait long for the actual deletion\n    setComments(\n      currentComments => currentComments.filter(\n        comment => comment.id !== commentId,\n      ),\n    );\n\n    await commentsApi.deleteComment(commentId);\n  };\n\n  return (\n    <div className=\"content\">\n      <div className=\"block\">\n        <h2>\n          {`#${post.id}: ${post.title}`}\n        </h2>\n        <p>{post.body}</p>\n      </div>\n\n      <div className=\"block\">\n        {!loaded && <Loader />}\n\n        {loaded && hasError && (\n          <div className=\"notification is-danger\">\n            Something went wrong\n          </div>\n        )}\n\n        {loaded && !hasError && comments.length === 0 && (\n          <p className=\"title is-4\">No comments yet</p>\n        )}\n\n        {loaded && !hasError && comments.length > 0 && (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map(comment => (\n              <article className=\"message is-small\" key={comment.id}>\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`}>\n                    {comment.name}\n                  </a>\n\n                  <button\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => deleteComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n\n        {loaded && !hasError && !visible && (\n          <button\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setVisible(true)}\n          >\n            Write a comment\n          </button>\n        )}\n\n        {loaded && !hasError && visible && (\n          <NewCommentForm onSubmit={addComment} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUsers } from '../api/users';\nimport { User } from '../types/User';\n\nexport const UserContext = React.createContext<User[]>([]);\n\nexport const UsersProvider: React.FC = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  return (\n    <UserContext.Provider value={users}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { UserContext } from './UsersContext';\nimport { User } from '../types/User';\n\ntype Props = {\n  value: User | null;\n  onChange: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  // `value` and `onChange` are traditional names for the form field\n  // `selectedUser` represents what actually stored here\n  value: selectedUser,\n  onChange,\n}) => {\n  // `users` are loaded from the API, so for the performance reasons\n  // we load them once in the `UsersContext` when the `App` is opened\n  // and now we can easily reuse the `UserSelector` in any form\n  const users = useContext(UserContext);\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!expanded) {\n      return;\n    }\n\n    // we save a link to remove the listener later\n    const handleDocumentClick = () => {\n      // we close the Dropdown on any click (inside or outside)\n      // So there is not need to check if we clicked inside the list\n      setExpanded(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  // we don't want to listening for outside clicks\n  // when the Dopdown is closed\n  }, [expanded]);\n\n  return (\n    <div className={classNames('dropdown', { 'is-active': expanded })}>\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setExpanded(current => !current);\n          }}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              onClick={() => {\n                onChange(user);\n              }}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUserPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [hasError, setError] = useState(false);\n\n  const [author, setAuthor] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  function loadUserPosts(userId: number) {\n    setLoaded(false);\n\n    getUserPosts(userId)\n      .then(setPosts)\n      .catch(() => setError(true))\n      // We disable the spinner in any case\n      .finally(() => setLoaded(true));\n  }\n\n  useEffect(() => {\n    // we clear the post when an author is changed\n    // not to confuse the user\n    setSelectedPost(null);\n\n    if (author) {\n      loadUserPosts(author.id);\n    } else {\n      setPosts([]);\n    }\n  }, [author?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector value={author} onChange={setAuthor} />\n              </div>\n\n              <div className=\"block\">\n                {!author && (\n                  <p>No user selected</p>\n                )}\n\n                {author && !loaded && (\n                  <Loader />\n                )}\n\n                {author && loaded && hasError && (\n                  <div className=\"notification is-danger\">\n                    Something went wrong!\n                  </div>\n                )}\n\n                {author && loaded && !hasError && posts.length === 0 && (\n                  <div className=\"notification is-warning\">\n                    No posts yet\n                  </div>\n                )}\n\n                {author && loaded && !hasError && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPostId={selectedPost?.id}\n                    onPostSelected={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UsersProvider } from './components/UsersContext';\n\nReactDOM.render(\n  <UsersProvider>\n    <App />\n  </UsersProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}