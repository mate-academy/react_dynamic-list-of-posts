{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/comments.ts","components/PostDetails.tsx","components/UsersContext.tsx","api/users.ts","components/UserSelector.tsx","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","onPostSelected","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","onSubmit","useState","submitting","setSubmitting","name","email","body","errors","setErrors","setValues","handleChange","event","target","field","value","current","handleSubmit","a","preventDefault","onReset","htmlFor","placeholder","onChange","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","deleteComment","commentId","PostDetails","comments","setComments","loaded","setLoaded","hasError","setError","visible","setVisible","useEffect","postId","cms","console","log","catch","finally","addComment","newComment","currentComments","filter","comment","commentsApi","length","href","UserContext","React","createContext","UsersProvider","children","users","setUsers","Provider","UserSelector","selectedUser","useContext","expanded","setExpanded","handleDocumentClick","document","addEventListener","removeEventListener","role","user","App","setPosts","author","setAuthor","selectedPost","setSelectedPost","loadUserPosts","userId","getUserPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c1813a59.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId?: number,\n  onPostSelected: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId = 0,\n  onPostSelected,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr key={post.id} data-cy=\"Post\">\n            <td data-cy=\"PostId\">{post.id}</td>\n            <td data-cy=\"PostTitle\">{post.title}</td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  {\n                    'is-light': post.id !== selectedPostId,\n                  },\n                )}\n                onClick={() => {\n                  onPostSelected(post.id === selectedPostId ? null : post);\n                }}\n              >\n                {post.id === selectedPostId ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onSubmit: (data: CommentData) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onSubmit }) => {\n  const [submitting, setSubmitting] = useState(false);\n\n  const [errors, setErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const [{ name, email, body }, setValues] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const clearForm = () => {\n    setValues({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name: field, value } = event.target;\n\n    setValues(current => ({ ...current, [field]: value }));\n    setErrors(current => ({ ...current, [field]: false }));\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrors({\n      name: !name,\n      email: !email,\n      body: !body,\n    });\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    // it is very easy to forget about `await` keyword\n    await onSubmit({ name, email, body });\n\n    // and the spinner will disappear immediately\n    setSubmitting(false);\n    setValues(current => ({ ...current, body: '' }));\n    // We keep the entered name and email\n  };\n\n  return (\n    <form onSubmit={handleSubmit} onReset={clearForm} data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errors.name })}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': errors.email })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': errors.body })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': submitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// import { client } from '../utils/axiosClient';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport * as commentsApi from '../api/comments';\n\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [hasError, setError] = useState(false);\n  const [visible, setVisible] = useState(false);\n\n  function loadComments() {\n    setLoaded(false);\n    setError(false);\n    setVisible(false);\n\n    commentsApi.getPostComments(post.id)\n      .then(cms => {\n        setComments(cms);\n        // eslint-disable-next-line no-console\n        console.log(cms);\n      }) // save the loaded comments\n      .catch(() => setError(true)) // show an error when something went wrong\n      .finally(() => setLoaded(true)); // hide the spinner\n  }\n\n  useEffect(loadComments, [post.id]);\n\n  // The same useEffect with async/await\n  /*\n  async function loadComments() {\n    setLoaded(false);\n    setVisible(false);\n    setError(false);\n\n    try {\n      const commentsFromServer = await commentsApi.getPostComments(post.id);\n\n      setComments(commentsFromServer);\n    } catch (error) {\n      setError(true);\n    } finally {\n      setLoaded(true);\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, []);\n\n  useEffect(loadComments, [post.id]); // Wrong!\n  // effect can return only a function but not a Promise\n  */\n\n  const addComment = async ({ name, email, body }: CommentData) => {\n    try {\n      const newComment = await commentsApi.createComment({\n        name,\n        email,\n        body,\n        postId: post.id,\n      });\n\n      setComments(\n        currentComments => [...currentComments, newComment],\n      );\n\n      // setComments([...comments, newComment]);\n      // works wrong if we wrap `addComment` with `useCallback`\n      // because it takes the `comments` cached during the first render\n      // not the actual ones\n    } catch (error) {\n      // we show an error message in case of any error\n      setError(true);\n    }\n  };\n\n  const deleteComment = async (commentId: number) => {\n    // we delete the comment immediately so as\n    // not to make the user wait long for the actual deletion\n    setComments(\n      currentComments => currentComments.filter(\n        comment => comment.id !== commentId,\n      ),\n    );\n\n    await commentsApi.deleteComment(commentId);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${post.id}: ${post.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {post.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {!loaded && (\n          <Loader />\n        )}\n\n        {loaded && hasError && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n\n        {loaded && !hasError && comments.length === 0 && (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )}\n\n        {loaded && !hasError && comments.length > 0 && (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map(comment => (\n              <article\n                className=\"message is-small\"\n                key={comment.id}\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => deleteComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n\n        {loaded && !hasError && !visible && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setVisible(true)}\n          >\n            Write a comment\n          </button>\n        )}\n\n        {loaded && !hasError && visible && (\n          <NewCommentForm onSubmit={addComment} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUsers } from '../api/users';\nimport { User } from '../types/User';\n\nexport const UserContext = React.createContext<User[]>([]);\n\nexport const UsersProvider: React.FC = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  return (\n    <UserContext.Provider value={users}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUser = (id: number) => {\n  return client.get<User[]>(`/users/${id}`);\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { UserContext } from './UsersContext';\nimport { User } from '../types/User';\n\ntype Props = {\n  value: User | null;\n  onChange: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  // `value` and `onChange` are traditional names for the form field\n  // `selectedUser` represents what actually stored here\n  value: selectedUser,\n  onChange,\n}) => {\n  // `users` are loaded from the API, so for the performance reasons\n  // we load them once in the `UsersContext` when the `App` is opened\n  // and now we can easily reuse the `UserSelector` in any form\n  const users = useContext(UserContext);\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!expanded) {\n      return;\n    }\n\n    // we save a link to remove the listener later\n    const handleDocumentClick = () => {\n      // we close the Dropdown on any click (inside or outside)\n      // So there is not need to check if we clicked inside the list\n      setExpanded(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  // we don't want to listening for outside clicks\n  // when the Dopdown is closed\n  }, [expanded]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': expanded })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setExpanded(current => !current);\n          }}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              onClick={() => {\n                onChange(user);\n              }}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUserPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [hasError, setError] = useState(false);\n\n  const [author, setAuthor] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  function loadUserPosts(userId: number) {\n    setLoaded(false);\n\n    getUserPosts(userId)\n      .then(setPosts)\n      .catch(() => setError(true))\n      // We disable the spinner in any case\n      .finally(() => setLoaded(true));\n  }\n\n  useEffect(() => {\n    // we clear the post when an author is changed\n    // not to confuse the user\n    setSelectedPost(null);\n\n    if (author) {\n      loadUserPosts(author.id);\n    } else {\n      setPosts([]);\n    }\n  }, [author?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector value={author} onChange={setAuthor} />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!author && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {author && !loaded && (\n                  <Loader />\n                )}\n\n                {author && loaded && hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {author && loaded && !hasError && posts.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {author && loaded && !hasError && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPostId={selectedPost?.id}\n                    onPostSelected={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPosts = () => {\n  return client.get<Post[]>('/posts');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UsersProvider } from './components/UsersContext';\n\nReactDOM.render(\n  <UsersProvider>\n    <App />\n  </UsersProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}